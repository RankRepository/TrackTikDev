{"version":3,"sources":["color-field.js","group.js","image-upload.js","jquery.multi-select.js","admin.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjrpphBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"admin.js","sourcesContent":["/*!\n  jQuery wpcolorpicker plugin\n  @name wpcolorpicker\n  @author Phil BG\n  @version 1\n  @date 4/12/2014\n  @category jQuery Plugin\n  @copyright (c) 2014 no name\n  @usage\n*/\n(function( $ ) {\n \n    // Add Color Picker to all inputs that have 'color-field' class\n    $(function() {\n        $('.color-field').wpColorPicker();\n    });\n     \n})( jQuery ); ","//\n//  FONCTION POUR FIELD GROUP DES METAS\n//\n\njQuery(document).ready(function($){\n  var $body = $('body');\n\n  // Toggle behavior\n  var $btn = $('.js-group-toggle-zone');\n  if ($btn.length > 0) {\n    $(document).on('click', '.js-group-toggle-zone', function() {\n      var $this = $(this),\n          $parent = $this.parents('.js-group-item:eq(0)'),\n          $wrap = $parent.find('[data-js=\"toggle-group-wrap\"]').first();\n\n      // Parent\n      $parent.toggleClass('is-closed');\n\n      // Button\n      $this.find('[data-js=\"toggle-group-btn\"]').toggleClass('is-closed');\n\n      // Content\n      $wrap.toggleClass('is-closed');\n    });\n  }\n\n  /**\n   * Toggle all items from group\n   * If buttons are for parent, only toggle parents\n   * IF buttons are for childent, only toggle children d\n   */\n  $body.on('click', '[data-toggle-all]', function() {\n    var $this = $(this),\n        type = $(this).data('type'),\n        $container = $($this.data('container')),\n        $items = $container.find('[data-js=\"toggle-group-btn\"].' + type + ', [data-js=\"toggle-group-wrap\"].' + type);\n\n    if ($this.data('toggle-all') === 'open') {\n      $items.removeClass('is-closed');\n    } else {\n      $items.addClass('is-closed');\n    }\n  });\n\n  // Init dragguable items\n  $('.pn-group-container, .pn-group-children-container').sortable({\n    handle: \".js-sortable-handle\"\n  });\n\n  // Optionaly show title inside item header\n  $itemTitlesRow = $('.js-is-group-title');\n  $itemTitlesRow.each(function(index, el) {\n    var $this = $(this),\n        value = $this.find('input').val(),\n        $title = $this.parents('.js-group-item:first').find('.js-header-item-title:first');\n\n    if (value !== '') {\n      $title.text(value);\n    }\n  });\n\n  // Update title if text has changed inside input\n  $body.on('change', '.js-is-group-title input', function() {\n    var $this = $(this),\n        value = $this.val(),\n        $title = $this.parents('.js-group-item:first').find('.js-header-item-title:first');\n\n    if (value !== '') {\n      $title.text(value);\n    } else {\n      $title.text('');\n    }\n  });\n\n\n  // ADD BLOCK\n  $body.on('click', '[data-js=\"add-group-line\"]', function(){\n    var templateId = $(this).data('template');\n    var containerId = $(this).data('container');\n\n    // Open block on add\n    $(containerId).append($(templateId).html().replace(new RegExp('is-closed', 'g'), ''));\n  });\n  \n  // ADD BLOCK CHILDREN\n  $body.on('click', '[data-js=\"add-group-line-children\"]', function(){\n    var templateId = $(this).data('template');\n    var tableParent = $(this).closest('table');\n    var childrenContainer = tableParent.find('[data-js=\"pn-group-children-container\"]');\n    //var templateId = $(this).data('template');\n\n    $(templateId).find('.is-closed').removeClass('is-closed');\n\n    // Open block on add\n    childrenContainer.append($(templateId).html().replace(new RegExp('is-closed', 'g'), ''));\n  });\n\n  //Before saving, arrange the children data\n  $('form#post, .js-option-form').submit(function(e){\n    //e.preventDefault();\n    \n    //Check each Parent Group model type\n    $('[data-js=\"pn-group-container\"]').each(function(){\n      \n      var groupData = [];\n      var parentModel = $(this).data('parent-model');\n      var childModel = $(this).data('child-model');\n      var modelName = $(this).data('name');\n      \n      //Check Each Parent Block\n      $(this).find('[data-js=\"pn-group-parent\"]').each(function(){\n        var parentData = new Object();\n        parentData.children = [];\n        //Parse each current Parent Field\n        for(var i=0; i<parentModel.length; i++){\n          var inputName = modelName + '_' + parentModel[i] + '[]';\n          var value = $(this).find('[name=\"' + inputName + '\"]:eq(0)').val();\n\n          parentData[parentModel[i]] = value;\n        }\n        \n        //Check Each Child Block\n        $(this).find('[data-js=\"pn-group-child\"]').each(function(){\n          var childData = new Object(); \n          for(var i=0; i<childModel.length; i++){\n            var inputName = modelName + '_' + childModel[i] + '[]';\n            var value = $(this).find('[name=\"' + inputName + '\"]:eq(0)').val();\n\n            childData[childModel[i]] = value;\n          }\n          parentData.children.push( childData);\n        });\n\n        groupData.push(parentData);\n      });\n\n      $('input[name=\"' + modelName + '\"]').val(JSON.stringify(groupData));\n\n    });\n  });\n\n  //REMOVE BLOCK\n  $body.on('click', '[data-js=\"remove-group-line\"]', function(){\n    if(confirm('Voulez-vous vraiment supprimer cet élément?')){\n      var tableParent = $(this).closest('table');\n      tableParent.remove();\n    }\n  });\n});\n","/*!\n  jQuery wpmediaimage plugin\n  @name wpmediaimage\n  @author Hugo Lach\n  @version 1\n  @date 4/12/2014\n  @category jQuery Plugin\n  @copyright (c) 2014 no name\n  @usage \n*/\n(function($){\n    $.fn.wpmediaimage = function(update_id){\n        return this.each(function() {\n            var link = $( this );            \n\n            var parentContainer = link.closest(\"[data-js='wp-media-container']\");\n            this.previewContainer = parentContainer.find(\"div.galerieImagesVariations\");\n            this.input = parentContainer.find(\"input\");\n                        \n            $(this).attr(\"data-init-mediagal\", \"init\");\n                        \n            //\n            //FUNC THAT RETURN THE WP MEDIA GALLERY FRAME\n            //\n            this.frame= function(){\n                if ( this._frame ) {\n                    return this._frame;\n                }\n                //CREATE THE FRAME FOR UPLOADING\n                    this._frame = wp.media({\n                        id:         'my-frame',                \n                      //  state:      'gallery-edit',\n                        title:      wp.media.view.l10n.editGalleryTitle,                     \n                        multiple:   false\n                       // selection:  selection\n                    });                                      \n      \n                //LOAD THE SELECTED IMAGE\n                var leframe = this._frame;\n                var me = this;                \n                this._frame.on('open', function(){\n                    var selection = leframe.state().get('selection');                    \n                    var selected = me.input.val();\n                    if (selected) {\n                        selection.add(wp.media.attachment(selected));\n                    }\n                });                \n\n                //SAVE THE GALLERY IDS ON INPUT FIELD AND SHOW TUMBNAILS\n                this._frame.on( 'close',  function() {\n                    var selection = leframe.state().get('selection');\n                    \n                    // no selection\n                    if (!selection) {\n                        return;\n                    }\n                    \n                    // iterate through selected elements                    \n                    selection.each(function(attachment) {\n                        var url = attachment.attributes.url;                        \n                        me.input.val(attachment.attributes.id);  \n                        console.log(attachment);\n                        console.log(me.input);\n                        console.log(me.input.val());\n                        try{\n                            thumbUrl = attachment.attributes.sizes.thumbnail.url;                                                        \n                        }catch(e){\n                            thumbUrl = attachment.attributes.url;                              \n                        }                        \n                        \n                        var fileExt = thumbUrl.split('.').pop();   \n                        \n                        if(fileExt == \"pdf\"){\n                            me.previewContainer.html(\"<p>\" + attachment.attributes.filename + \"</p>\");                                                              \n                        }\n                        else if(fileExt == \"mp4\"){\n                            me.previewContainer.html(\"<img src='\" + attachment.attributes.icon + \"'><p>\" + attachment.attributes.filename + \"</p>\");                                                              \n                        }\n                        else{\n                            me.previewContainer.html(\"<img src='\" + thumbUrl + \"'>\");    \n                            //FOR WOOCOMERCE ALLOW BUTTON TO SAVE\n                             me.previewContainer.closest( '.woocommerce_variation' ) .addClass( 'variation-needs-update' );                            \n                            jQuery( 'button.cancel-variation-changes, button.save-variation-changes' ).removeAttr( 'disabled' );\n                            jQuery( '#variable_product_options' ).trigger( 'woocommerce_variations_input_changed' );            \n                        }\n                        \n                        \n                    });                                        \n                });        \n\n                return this._frame;\n            };\n            \n\n            link.bind(\"click.wpmediagallery\", function(){\n                this.frame().open();\n            });                        \n        });        \n    };\n} (jQuery));\n//  END WORDPRES MEDIA UPLOADER IMAGE\n//  \n\n\n/*!\n  jQuery multi pdf\n  @name wpmediaimage\n  @author Hugo Lach\n  @version 1\n  @date 4/12/2014\n  @category jQuery Plugin\n  @copyright (c) 2014 no name\n  @usage \n*/\n(function($){\n    $.fn.wpmultipdf = function(update_id){\n        return this.each(function() {\n            var link = $( this );            \n            this.idDiv = link.attr(\"data-divImagesId\");           //ID du div pour afficher les thumbnails\n            this.idInput = link.attr(\"data-inputImagesId\");       //ID de l'input hidden qui a les ID      \n            this.leID  = jQuery(this.idInput).val();                 //Les IDs des photos            \n                        \n            //\n            //FUNC THAT RETURN THE WP MEDIA GALLERY FRAME\n            //\n            this.frame= function(){\n                if ( this._frame ) {\n                    return this._frame;\n                }\n                //CREATE THE FRAME FOR UPLOADING\n                    this._frame = wp.media({\n                        id:         'my-frame',                \n                      //  state:      'gallery-edit',\n                        title:      wp.media.view.l10n.editGalleryTitle,                     \n                        multiple:   false\n                       // selection:  selection\n                    });                                      \n      \n                //LOAD THE SELECTED IMAGE\n                var leframe = this._frame;\n                var me = this;                \n                this._frame.on('open', function(){\n                    var selection = leframe.state().get('selection');                    \n                    var selected = jQuery(me.idInput).val();\n                    if (selected) {\n                        selection.add(wp.media.attachment(selected));\n                    }\n                });                \n\n                //SAVE THE GALLERY IDS ON INPUT FIELD AND SHOW TUMBNAILS\n                this._frame.on( 'close',  function() {\n                    var selection = leframe.state().get('selection');\n                    \n                    // no selection\n                    if (!selection) {\n                        return;\n                    }\n                    \n                    // iterate through selected elements                    \n                    selection.each(function(attachment) {\n                        var url = attachment.attributes.url;                        \n                        //jQuery(me.idInput).val(attachment.attributes.id);  \n                        //console.log(attachment);\n                        try{\n                            thumbUrl = attachment.attributes.sizes.thumbnail.url;                                                        \n                        }catch(e){\n                            thumbUrl = attachment.attributes.url;                              \n                        }                        \n                        \n                        var fileExt = thumbUrl.split('.').pop();   \n                        if(fileExt == \"pdf\"){\n                            jQuery(me.idDiv).html(\"<p>\" + attachment.attributes.filename + \"</p>\");                                                              \n                        }else{\n                            jQuery(me.idDiv).html(\"<img src='\" + thumbUrl + \"'>\");                                  \n                        }\n                    });                                        \n                });        \n\n                return this._frame;\n            };\n            \n\n            link.bind(\"click.wpmediagallery\", function(){\n                this.frame().open();\n            });                        \n        });        \n    };\n} (jQuery));\n//  END WORDPRES MEDIA UPLOADER IMAGE\n//  \n\n\n\n/*!\n  jQuery WPMEDIAGALLERY plugin\n  @name jquery.WPMEDIAGALLERY.js\n  @author Hugo Lach\n  @version 1\n  @date 4/12/2014\n  @category jQuery Plugin\n  @copyright (c) 2014 no name\n  @usage must be used with these html-data -data-divImagesId  -data-inputImagesId -data-ids  \n*/\n(function($){\n    $.fn.wpmediagallery = function(update_id){\n        return this.each(function() {\n            var link = $( this );            \n\n            var parentContainer = link.closest(\"[data-js='wp-media-container']\");\n            this.previewContainer = parentContainer.find(\"div.galerieImagesVariations\");\n            this.input = parentContainer.find(\"input\");                     \n            this.lesids  = this.input.val();                 //Les IDs des photos            \n\n            $(this).attr(\"data-init-mediagal\", \"init\");\n            \n            //\n            //FUNC THAT RETRIEVE AND LOAD THE IMAGE's SELECTION FOR GALLERY\n            //\n            this.selectImages = function(){\n                var galleryShortcode = \"[gallery ids='\" + this.lesids + \"']\";\n                var shortcode = wp.shortcode.next( 'gallery', galleryShortcode ),\n                    defaultPostId = wp.media.gallery.defaults.id,\n                    attachments, selection;\n\n\n                // Bail if we didn't match the shortcode or all of the content.\n                if ( ! shortcode ){\n                    return;\n                }\n                // Ignore the rest of the match object.\n                shortcode = shortcode.shortcode;\n\n                if ( _.isUndefined( shortcode.get('id') ) && ! _.isUndefined( defaultPostId ) ){\n                    shortcode.set( 'id', defaultPostId );\n                }\n\n                attachments = wp.media.gallery.attachments( shortcode );\n                selection = new wp.media.model.Selection( attachments.models, {\n                    props:    attachments.props.toJSON(),\n                    multiple: true\n                });\n\n                selection.gallery = attachments.gallery;\n\n                // Fetch the query's attachments, and then break ties from the\n                // query to allow for sorting.\n                selection.more().done( function() {\n                    // Break ties with the query.\n                    selection.props.set({ query: false });\n                    selection.unmirror();\n                    selection.props.unset('orderby');\n                });\n\n                return selection;                                \n            };\n            \n            //\n            //FUNC THAT RETURN THE WP MEDIA GALLERY FRAME\n            //\n            this.frame= function(){\n                if ( this._frame ){\n                    return this._frame;\n                }\n                //CREATE THE FRAME FOR UPLOADING\n                var selection = this.selectImages();\n               // console.log(selection);\n                if(this.lesids.length === 0){                  \n                    this._frame = wp.media({\n                        \n                        id:         'my-frame',                \n                        frame:      'post',\n                        state:      'gallery-edit',\n                        title:      wp.media.view.l10n.editGalleryTitle,\n                        editing:    true,\n                        multiple:   true\n                    });                      \n                }else{\n                    this._frame = wp.media({\n                        id:         'my-frame',                \n                        frame:      'post',\n                        state:      'gallery-edit',\n                        title:      wp.media.view.l10n.editGalleryTitle,\n                        editing:    true,\n                        multiple:   true,\n                        selection:  selection\n                    });                      \n                }\n      \n\n                //SAVE THE GALLERY IDS ON INPUT FIELD AND SHOW TUMBNAILS\n                var galthis = this;\n                this._frame.on( 'update', \n                               function() {\n                    var controller = galthis._frame.states.get('gallery-edit');\n                    var library = controller.get('library');\n                    // Need to get all the attachment ids/urls for gallery\n                    var ids = library.pluck('id');\n                    var thumbs = library.pluck('sizes');\n                    var x, images = \"\";\n\n                    for(x in thumbs){\n                        if(typeof thumbs[x].thumbnail !== \"undefined\"){\n                            images += \"<img src='\" + thumbs[x].thumbnail.url + \"'>&nbsp;&nbsp;\" ;\n                        }else{\n                            images += \"<img src='\" + thumbs[x].full.url + \"'>&nbsp;&nbsp;\" ;\n                        }                        \n                    }\n                    galthis.previewContainer.html(images);    \n                    //console.log(galthis.idDiv);\n                    galthis.input.val(ids);            \n                });        \n\n                return this._frame;\n            };\n            \n\n            link.bind(\"click.wpmediagallery\", function(){\n                this.frame().open();\n                //wp.media.shibaMlibEditGallery.frame().open()                \n            });            \n            \n        });        \n\n    };\n} (jQuery));\n//  END WORDPRES MEDIA UPLOADER WITH GALLERY :D\n//  \n//  REF : http://shibashake.com/wordpress-theme/how-to-add-the-wordpress-3-5-media-manager-interface-part-2\n\n\n\n\n\n\njQuery(document).ready(function($){\n  //$( wp.media.shibaMlibEditGallery.init );\n    $(\".upload-and-attach-link-multiPDF\").wpmultipdf();\n    \n    $(\"body\").on(\"click\", \".upload-and-attach-link\", function(e){\n        e.preventDefault();   \n        if($(this).data(\"init-mediagal\") == \"init\"){\n        }else{\n            $(\".upload-and-attach-link\").wpmediagallery();\n            $(this).click();            \n        }\n    });\n    \n    $(\"body\").on(\"click\", \".upload-and-attach-link-oneImage\", function(e){\n        e.preventDefault();   \n        if($(this).data(\"init-mediagal\") == \"init\"){\n        }else{\n            $(\".upload-and-attach-link-oneImage\").wpmediaimage();\n            $(this).click();            \n        }\n    });    \n    \n    \n    $(\"body\").on(\"click\", \".upload-and-attach-link-del\", function(e){    \n        e.preventDefault();\n \n        var parentContainer = $(this).closest(\"[data-js='wp-media-container']\");\n        var previewContainer = parentContainer.find(\"div.galerieImagesVariations\");\n        var input = parentContainer.find(\"input\");\n\n        input.val(\"\");\n        previewContainer.html(\"\");       \n    });    \n    \n    \n    \n\n\n});","/*\n* MultiSelect v0.9.11\n* Copyright (c) 2012 Louis Cuny\n*\n* This program is free software. It comes without any warranty, to\n* the extent permitted by applicable law. You can redistribute it\n* and/or modify it under the terms of the Do What The Fuck You Want\n* To Public License, Version 2, as published by Sam Hocevar. See\n* http://sam.zoy.org/wtfpl/COPYING for more details.\n*/\n\n!function ($) {\n\n  \"use strict\";\n\n\n /* MULTISELECT CLASS DEFINITION\n  * ====================== */\n\n  var MultiSelect = function (element, options) {\n    this.options = options;\n    this.$element = $(element);\n    this.$container = $('<div/>', { 'class': \"ms-container\" });\n    this.$selectableContainer = $('<div/>', { 'class': 'ms-selectable' });\n    this.$selectionContainer = $('<div/>', { 'class': 'ms-selection' });\n    this.$selectableUl = $('<ul/>', { 'class': \"ms-list\", 'tabindex' : '-1' });\n    this.$selectionUl = $('<ul/>', { 'class': \"ms-list\", 'tabindex' : '-1' });\n    this.scrollTo = 0;\n    this.elemsSelector = 'li:visible:not(.ms-optgroup-label,.ms-optgroup-container,.'+options.disabledClass+')';\n  };\n\n  MultiSelect.prototype = {\n    constructor: MultiSelect,\n\n    init: function(){\n      var that = this,\n          ms = this.$element;\n\n      if (ms.next('.ms-container').length === 0){\n        ms.css({ position: 'absolute', left: '-9999px' });\n        ms.attr('id', ms.attr('id') ? ms.attr('id') : Math.ceil(Math.random()*1000)+'multiselect');\n        this.$container.attr('id', 'ms-'+ms.attr('id'));\n        this.$container.addClass(that.options.cssClass);\n        ms.find('option').each(function(){\n          that.generateLisFromOption(this);\n        });\n\n        this.$selectionUl.find('.ms-optgroup-label').hide();\n\n        if (that.options.selectableHeader){\n          that.$selectableContainer.append(that.options.selectableHeader);\n        }\n        that.$selectableContainer.append(that.$selectableUl);\n        if (that.options.selectableFooter){\n          that.$selectableContainer.append(that.options.selectableFooter);\n        }\n\n        if (that.options.selectionHeader){\n          that.$selectionContainer.append(that.options.selectionHeader);\n        }\n        that.$selectionContainer.append(that.$selectionUl);\n        if (that.options.selectionFooter){\n          that.$selectionContainer.append(that.options.selectionFooter);\n        }\n\n        that.$container.append(that.$selectableContainer);\n        that.$container.append(that.$selectionContainer);\n        ms.after(that.$container);\n\n        that.activeMouse(that.$selectableUl);\n        that.activeKeyboard(that.$selectableUl);\n\n        var action = that.options.dblClick ? 'dblclick' : 'click';\n\n        that.$selectableUl.on(action, '.ms-elem-selectable', function(){\n          that.select($(this).data('ms-value'));\n        });\n        that.$selectionUl.on(action, '.ms-elem-selection', function(){\n          that.deselect($(this).data('ms-value'));\n        });\n\n        that.activeMouse(that.$selectionUl);\n        that.activeKeyboard(that.$selectionUl);\n\n        ms.on('focus', function(){\n          that.$selectableUl.focus();\n        })\n      }\n\n      var selectedValues = ms.find('option:selected').map(function(){ return $(this).val(); }).get();\n      that.select(selectedValues, 'init');\n\n      if (typeof that.options.afterInit === 'function') {\n        that.options.afterInit.call(this, this.$container);\n      }\n    },\n\n    'generateLisFromOption' : function(option, index, $container){\n      var that = this,\n          ms = that.$element,\n          attributes = \"\",\n          $option = $(option);\n\n      for (var cpt = 0; cpt < option.attributes.length; cpt++){\n        var attr = option.attributes[cpt];\n\n        if(attr.name !== 'value' && attr.name !== 'disabled'){\n          attributes += attr.name+'=\"'+attr.value+'\" ';\n        }\n      }\n      var selectableLi = $('<li data-value=\"'+$option.attr(\"value\")+'\"   '+attributes+'><span>'+that.escapeHTML($option.text())+'</span></li>'),\n          selectedLi = selectableLi.clone(),\n          value = $option.val(),\n          elementId = that.sanitize(value);\n\n      selectableLi\n        .data('ms-value', value)\n        .addClass('ms-elem-selectable')\n        .attr('id', elementId+'-selectable');\n\n      selectedLi\n        .data('ms-value', value)\n        .addClass('ms-elem-selection')\n        .attr('id', elementId+'-selection')\n        .hide();\n\n      if ($option.prop('disabled') || ms.prop('disabled')){\n        selectedLi.addClass(that.options.disabledClass);\n        selectableLi.addClass(that.options.disabledClass);\n      }\n\n      var $optgroup = $option.parent('optgroup');\n\n      if ($optgroup.length > 0){\n        var optgroupLabel = $optgroup.attr('label'),\n            optgroupId = that.sanitize(optgroupLabel),\n            $selectableOptgroup = that.$selectableUl.find('#optgroup-selectable-'+optgroupId),\n            $selectionOptgroup = that.$selectionUl.find('#optgroup-selection-'+optgroupId);\n\n        if ($selectableOptgroup.length === 0){\n          var optgroupContainerTpl = '<li class=\"ms-optgroup-container\"></li>',\n              optgroupTpl = '<ul class=\"ms-optgroup\"><li class=\"ms-optgroup-label\"><span>'+optgroupLabel+'</span></li></ul>';\n\n          $selectableOptgroup = $(optgroupContainerTpl);\n          $selectionOptgroup = $(optgroupContainerTpl);\n          $selectableOptgroup.attr('id', 'optgroup-selectable-'+optgroupId);\n          $selectionOptgroup.attr('id', 'optgroup-selection-'+optgroupId);\n          $selectableOptgroup.append($(optgroupTpl));\n          $selectionOptgroup.append($(optgroupTpl));\n          if (that.options.selectableOptgroup){\n            $selectableOptgroup.find('.ms-optgroup-label').on('click', function(){\n              var values = $optgroup.children(':not(:selected, :disabled)').map(function(){ return $(this).val() }).get();\n              that.select(values);\n            });\n            $selectionOptgroup.find('.ms-optgroup-label').on('click', function(){\n              var values = $optgroup.children(':selected:not(:disabled)').map(function(){ return $(this).val() }).get();\n              that.deselect(values);\n            });\n          }\n          that.$selectableUl.append($selectableOptgroup);\n          that.$selectionUl.append($selectionOptgroup);\n        }\n        index = index == undefined ? $selectableOptgroup.find('ul').children().length : index + 1;\n        selectableLi.insertAt(index, $selectableOptgroup.children());\n        selectedLi.insertAt(index, $selectionOptgroup.children());\n      } else {\n        index = index == undefined ? that.$selectableUl.children().length : index;\n\n        selectableLi.insertAt(index, that.$selectableUl);\n        selectedLi.insertAt(index, that.$selectionUl);\n      }\n    },\n\n    'addOption' : function(options){\n      var that = this;\n\n      if (options.value) options = [options];\n      $.each(options, function(index, option){\n        if (option.value && that.$element.find(\"option[value='\"+option.value+\"']\").length === 0){\n          var $option = $('<option value=\"'+option.value+'\">'+option.text+'</option>'),\n              index = parseInt((typeof option.index === 'undefined' ? that.$element.children().length : option.index)),\n              $container = option.nested == undefined ? that.$element : $(\"optgroup[label='\"+option.nested+\"']\")\n\n          $option.insertAt(index, $container);\n          that.generateLisFromOption($option.get(0), index, option.nested);\n        }\n      })\n    },\n\n    'escapeHTML' : function(text){\n      return $(\"<div>\").text(text).html();\n    },\n\n    'activeKeyboard' : function($list){\n      var that = this;\n\n      $list.on('focus', function(){\n        $(this).addClass('ms-focus');\n      })\n      .on('blur', function(){\n        $(this).removeClass('ms-focus');\n      })\n      .on('keydown', function(e){\n        switch (e.which) {\n          case 40:\n          case 38:\n            e.preventDefault();\n            e.stopPropagation();\n            that.moveHighlight($(this), (e.which === 38) ? -1 : 1);\n            return;\n          case 37:\n          case 39:\n            e.preventDefault();\n            e.stopPropagation();\n            that.switchList($list);\n            return;\n          case 9:\n            if(that.$element.is('[tabindex]')){\n              e.preventDefault();\n              var tabindex = parseInt(that.$element.attr('tabindex'), 10);\n              tabindex = (e.shiftKey) ? tabindex-1 : tabindex+1;\n              $('[tabindex=\"'+(tabindex)+'\"]').focus();\n              return;\n            }else{\n              if(e.shiftKey){\n                that.$element.trigger('focus');\n              }\n            }\n        }\n        if($.inArray(e.which, that.options.keySelect) > -1){\n          e.preventDefault();\n          e.stopPropagation();\n          that.selectHighlighted($list);\n          return;\n        }\n      });\n    },\n\n    'moveHighlight': function($list, direction){\n      var $elems = $list.find(this.elemsSelector),\n          $currElem = $elems.filter('.ms-hover'),\n          $nextElem = null,\n          elemHeight = $elems.first().outerHeight(),\n          containerHeight = $list.height(),\n          containerSelector = '#'+this.$container.prop('id');\n\n      $elems.removeClass('ms-hover');\n      if (direction === 1){ // DOWN\n\n        $nextElem = $currElem.nextAll(this.elemsSelector).first();\n        if ($nextElem.length === 0){\n          var $optgroupUl = $currElem.parent();\n\n          if ($optgroupUl.hasClass('ms-optgroup')){\n            var $optgroupLi = $optgroupUl.parent(),\n                $nextOptgroupLi = $optgroupLi.next(':visible');\n\n            if ($nextOptgroupLi.length > 0){\n              $nextElem = $nextOptgroupLi.find(this.elemsSelector).first();\n            } else {\n              $nextElem = $elems.first();\n            }\n          } else {\n            $nextElem = $elems.first();\n          }\n        }\n      } else if (direction === -1){ // UP\n\n        $nextElem = $currElem.prevAll(this.elemsSelector).first();\n        if ($nextElem.length === 0){\n          var $optgroupUl = $currElem.parent();\n\n          if ($optgroupUl.hasClass('ms-optgroup')){\n            var $optgroupLi = $optgroupUl.parent(),\n                $prevOptgroupLi = $optgroupLi.prev(':visible');\n\n            if ($prevOptgroupLi.length > 0){\n              $nextElem = $prevOptgroupLi.find(this.elemsSelector).last();\n            } else {\n              $nextElem = $elems.last();\n            }\n          } else {\n            $nextElem = $elems.last();\n          }\n        }\n      }\n      if ($nextElem.length > 0){\n        $nextElem.addClass('ms-hover');\n        var scrollTo = $list.scrollTop() + $nextElem.position().top - \n                       containerHeight / 2 + elemHeight / 2;\n\n        $list.scrollTop(scrollTo);\n      }\n    },\n\n    'selectHighlighted' : function($list){\n      var $elems = $list.find(this.elemsSelector),\n          $highlightedElem = $elems.filter('.ms-hover').first();\n\n      if ($highlightedElem.length > 0){\n        if ($list.parent().hasClass('ms-selectable')){\n          this.select($highlightedElem.data('ms-value'));\n        } else {\n          this.deselect($highlightedElem.data('ms-value'));\n        }\n        $elems.removeClass('ms-hover');\n      }\n    },\n\n    'switchList' : function($list){\n      $list.blur();\n      this.$container.find(this.elemsSelector).removeClass('ms-hover');\n      if ($list.parent().hasClass('ms-selectable')){\n        this.$selectionUl.focus();\n      } else {\n        this.$selectableUl.focus();\n      }\n    },\n\n    'activeMouse' : function($list){\n      var that = this;\n\n      $('body').on('mouseenter', that.elemsSelector, function(){\n        $(this).parents('.ms-container').find(that.elemsSelector).removeClass('ms-hover');\n        $(this).addClass('ms-hover');\n      });\n\n      $('body').on('mouseleave', that.elemsSelector, function () {\n          $(this).parents('.ms-container').find(that.elemsSelector).removeClass('ms-hover');;\n      });\n    },\n\n    'refresh' : function() {\n      this.destroy();\n      this.$element.multiSelect(this.options);\n    },\n\n    'destroy' : function(){\n      $(\"#ms-\"+this.$element.attr(\"id\")).remove();\n      this.$element.css('position', '').css('left', '')\n      this.$element.removeData('multiselect');\n    },\n\n    'select' : function(value, method){\n      if (typeof value === 'string'){ value = [value]; }\n\n      var that = this,\n          ms = this.$element,\n          msIds = $.map(value, function(val){ return(that.sanitize(val)); }),\n          selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #')+'-selectable').filter(':not(.'+that.options.disabledClass+')'),\n          selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection').filter(':not(.'+that.options.disabledClass+')'),\n          options = ms.find('option:not(:disabled)').filter(function(){ return($.inArray(this.value, value) > -1); });\n\n      if (method === 'init'){\n        selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #')+'-selectable'),\n        selections = this.$selectionUl.find('#' + msIds.join('-selection, #') + '-selection');\n      }\n\n      if (selectables.length > 0){\n        selectables.addClass('ms-selected').hide();\n        selections.addClass('ms-selected').show();\n\n        options.prop('selected', true);\n\n        that.$container.find(that.elemsSelector).removeClass('ms-hover');\n\n        var selectableOptgroups = that.$selectableUl.children('.ms-optgroup-container');\n        if (selectableOptgroups.length > 0){\n          selectableOptgroups.each(function(){\n            var selectablesLi = $(this).find('.ms-elem-selectable');\n            if (selectablesLi.length === selectablesLi.filter('.ms-selected').length){\n              $(this).find('.ms-optgroup-label').hide();\n            }\n          });\n\n          var selectionOptgroups = that.$selectionUl.children('.ms-optgroup-container');\n          selectionOptgroups.each(function(){\n            var selectionsLi = $(this).find('.ms-elem-selection');\n            if (selectionsLi.filter('.ms-selected').length > 0){\n              $(this).find('.ms-optgroup-label').show();\n            }\n          });\n        } else {\n          if (that.options.keepOrder && method !== 'init'){\n            var selectionLiLast = that.$selectionUl.find('.ms-selected');\n            if((selectionLiLast.length > 1) && (selectionLiLast.last().get(0) != selections.get(0))) {\n              selections.insertAfter(selectionLiLast.last());\n            }\n          }\n        }\n        if (method !== 'init'){\n          ms.trigger('change');\n          if (typeof that.options.afterSelect === 'function') {\n            that.options.afterSelect.call(this, value);\n          }\n        }\n      }\n    },\n\n    'deselect' : function(value){\n      if (typeof value === 'string'){ value = [value]; }\n\n      var that = this,\n          ms = this.$element,\n          msIds = $.map(value, function(val){ return(that.sanitize(val)); }),\n          selectables = this.$selectableUl.find('#' + msIds.join('-selectable, #')+'-selectable'),\n          selections = this.$selectionUl.find('#' + msIds.join('-selection, #')+'-selection').filter('.ms-selected').filter(':not(.'+that.options.disabledClass+')'),\n          options = ms.find('option').filter(function(){ return($.inArray(this.value, value) > -1); });\n\n      if (selections.length > 0){\n        selectables.removeClass('ms-selected').show();\n        selections.removeClass('ms-selected').hide();\n        options.prop('selected', false);\n\n        that.$container.find(that.elemsSelector).removeClass('ms-hover');\n\n        var selectableOptgroups = that.$selectableUl.children('.ms-optgroup-container');\n        if (selectableOptgroups.length > 0){\n          selectableOptgroups.each(function(){\n            var selectablesLi = $(this).find('.ms-elem-selectable');\n            if (selectablesLi.filter(':not(.ms-selected)').length > 0){\n              $(this).find('.ms-optgroup-label').show();\n            }\n          });\n\n          var selectionOptgroups = that.$selectionUl.children('.ms-optgroup-container');\n          selectionOptgroups.each(function(){\n            var selectionsLi = $(this).find('.ms-elem-selection');\n            if (selectionsLi.filter('.ms-selected').length === 0){\n              $(this).find('.ms-optgroup-label').hide();\n            }\n          });\n        }\n        ms.trigger('change');\n        if (typeof that.options.afterDeselect === 'function') {\n          that.options.afterDeselect.call(this, value);\n        }\n      }\n    },\n\n    'select_all' : function(){\n      var ms = this.$element,\n          values = ms.val();\n\n      ms.find('option:not(\":disabled\")').prop('selected', true);\n      this.$selectableUl.find('.ms-elem-selectable').filter(':not(.'+this.options.disabledClass+')').addClass('ms-selected').hide();\n      this.$selectionUl.find('.ms-optgroup-label').show();\n      this.$selectableUl.find('.ms-optgroup-label').hide();\n      this.$selectionUl.find('.ms-elem-selection').filter(':not(.'+this.options.disabledClass+')').addClass('ms-selected').show();\n      this.$selectionUl.focus();\n      ms.trigger('change');\n      if (typeof this.options.afterSelect === 'function') {\n        var selectedValues = $.grep(ms.val(), function(item){\n          return $.inArray(item, values) < 0;\n        });\n        this.options.afterSelect.call(this, selectedValues);\n      }\n    },\n\n    'deselect_all' : function(){\n      var ms = this.$element,\n          values = ms.val();\n\n      ms.find('option').prop('selected', false);\n      this.$selectableUl.find('.ms-elem-selectable').removeClass('ms-selected').show();\n      this.$selectionUl.find('.ms-optgroup-label').hide();\n      this.$selectableUl.find('.ms-optgroup-label').show();\n      this.$selectionUl.find('.ms-elem-selection').removeClass('ms-selected').hide();\n      this.$selectableUl.focus();\n      ms.trigger('change');\n      if (typeof this.options.afterDeselect === 'function') {\n        this.options.afterDeselect.call(this, values);\n      }\n    },\n\n    sanitize: function(value){\n      var hash = 0, i, character;\n      if (value.length == 0) return hash;\n      var ls = 0;\n      for (i = 0, ls = value.length; i < ls; i++) {\n        character  = value.charCodeAt(i);\n        hash  = ((hash<<5)-hash)+character;\n        hash |= 0; // Convert to 32bit integer\n      }\n      return hash;\n    }\n  };\n\n  /* MULTISELECT PLUGIN DEFINITION\n   * ======================= */\n\n  $.fn.multiSelect = function () {\n    var option = arguments[0],\n        args = arguments;\n\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('multiselect'),\n          options = $.extend({}, $.fn.multiSelect.defaults, $this.data(), typeof option === 'object' && option);\n\n      if (!data){ $this.data('multiselect', (data = new MultiSelect(this, options))); }\n\n      if (typeof option === 'string'){\n        data[option](args[1]);\n      } else {\n        data.init();\n      }\n    });\n  };\n\n  $.fn.multiSelect.defaults = {\n    keySelect: [32],\n    selectableOptgroup: false,\n    disabledClass : 'disabled',\n    dblClick : false,\n    keepOrder: false,\n    cssClass: ''\n  };\n\n  $.fn.multiSelect.Constructor = MultiSelect;\n\n  $.fn.insertAt = function(index, $parent) {\n    return this.each(function() {\n      if (index === 0) {\n        $parent.prepend(this);\n      } else {\n        $parent.children().eq(index - 1).after(this);\n      }\n    });\n}\n\n}(window.jQuery);\n","jQuery(document).ready(function($){\n    //Drag and Drop to sort\n    var dragging, placeholders = $();  \n    $.fn.sortable2=function(e){var t=String(e);e=$.extend({connectWith:false},e);return this.each(function(){if(/^enable|disable|destroy$/.test(t)){var n=$(this).children($(this).data(\"items\")).attr(\"draggable\",t==\"enable\");if(t==\"destroy\"){n.add(this).removeData(\"connectWith items\").off(\"dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s\")}return}var r,i,n=$(this).children(e.items);var s=$(\"<\"+(/^ul|ol$/i.test(this.tagName)?\"li\":\"div\")+' class=\"sortable-placeholder\">');n.find(e.handle).mousedown(function(){r=true}).mouseup(function(){r=false});$(this).data(\"items\",e.items);placeholders=placeholders.add(s);if(e.connectWith){$(e.connectWith).add(this).data(\"connectWith\",e.connectWith)}n.attr(\"draggable\",\"true\").on(\"dragstart.h5s\",function(t){if(e.handle&&!r){return false}r=false;var n=t.originalEvent.dataTransfer;n.effectAllowed=\"move\";n.setData(\"Text\",\"dummy\");i=(dragging=$(this)).addClass(\"sortable-dragging\").index()}).on(\"dragend.h5s\",function(){if(!dragging){return}dragging.removeClass(\"sortable-dragging\").show();placeholders.detach();if(i!=dragging.index()){dragging.parent().trigger(\"sortupdate\",{item:dragging.parent()})}dragging=null}).not(\"a[href], img\").on(\"selectstart.h5s\",function(){this.dragDrop&&this.dragDrop();return false}).end().add([this,s]).on(\"dragover.h5s dragenter.h5s drop.h5s\",function(t){if(!n.is(dragging)&&e.connectWith!==$(dragging).parent().data(\"connectWith\")){return true}if(t.type==\"drop\"){t.stopPropagation();placeholders.filter(\":visible\").after(dragging);dragging.trigger(\"dragend.h5s\");return false}t.preventDefault();t.originalEvent.dataTransfer.dropEffect=\"move\";if(n.is(this)){if(e.forcePlaceholderSize){s.height(dragging.outerHeight())}dragging.hide();$(this)[s.index()<$(this).index()?\"after\":\"before\"](s);placeholders.not(s).detach()}else if(!placeholders.is(this)&&!$(this).children(e.items).length){placeholders.detach();$(this).append(s)}return false})})}\n  \n    //Init multiselect\n    $('select.selectMultiple').multiSelect( {\n      keepOrder:true,\n      selectableHeader: \"<div class='custom-header'>Disponible</div>\",\n      selectionHeader: \"<div class='custom-header'>Sélectionné</div>\",\n       afterSelect: function(){\n         $( \".ms-selection ul.ms-list\" ).trigger('sortupdate');\n        },\n       afterDeselect: function(){\n        // console.log(\"dese\");\n        }\n      }\n    );\n    \n    //SAVE THE ORDERED LIST\n    $( \".ms-selection ul.ms-list\" ).sortable2().bind('sortupdate', function(e, param) {\n      var liList = $(this);\n      var selectID = $(liList).parent().parent();\n      selectID = $(selectID).attr(\"id\").replace(\"ms-\", \"\");\n      console.log($(\"#\"+selectID).val());\n      var newVal = [];\n      //Check each LI\n      $(liList).children(\"li\").each(function(){\n        //IF NOT DISPLAY NONE\n        if($(this).css(\"display\") !== \"none\"){\n          //console.log($(this).data(\"value\"));   \n          newVal.push($(this).data(\"value\").toString());\n        }\n      });\n      //Check each NEW VAL\n      for(i=(newVal.length-1); i>=0; i--){\n        //find option\n        var option = $(\"#\"+selectID).find(\"option[value=\"+newVal[i]+\"]\").remove();\n        $(\"#\"+selectID).prepend(option);\n      }\n      \n      console.log($(\"#\"+selectID).val());\n      //Triggered when the user stopped sorting and the DOM position has changed.\n    });\n    \n\n\n    geocoder = new google.maps.Geocoder();\n    \n    // Trouve lat et lng\n    $(\"#btnTrouverLatLng\").click(function(e){\n        e.preventDefault();\n        var prefix = $(this).data(\"name\");\n        var rue = $(\"#\" + prefix + \"_rue\").val();\n        var ville = $(\"#\" + prefix + \"_ville\").val();\n        var codepostal = $(\"#\" + prefix + \"_codepostal\").val();\n        var adresse = rue + \" \" + ville + \" \" + codepostal;\n        \n        trouverLatLng(adresse, prefix);\n    });\n    \n\n    function trouverLatLng(adresse, prefix){\n        geocoder.geocode( { 'address': adresse}, function(results, status) {\n            if (status == google.maps.GeocoderStatus.OK) {                      //IF CODE POSTAL IS VALID\n                //console.log(results[0].geometry.location);\n                var codepostalpointe = results[0].geometry.location;\n                //console.log(codepostalpointe.lat() + \" et \" + codepostalpointe.lng());\n                $(\"#\" + prefix + \"_lat\").val(codepostalpointe.lat());\n                $(\"#\" + prefix + \"_lng\").val(codepostalpointe.lng());\n            }\n        });\n    }\n});"],"sourceRoot":"/source/"}